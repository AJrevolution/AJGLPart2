#version 420 core

layout(std140, binding = 0) uniform CameraMatrices 
{
    mat4 viewMatrix;
    mat4 projectionMatrix;
    vec3 camPos;
    float padding;
};

out vec4 FragColor;
in vec2 TexCoords;
in vec3 WorldPos;
in vec3 Normal;

struct Material 
{
    sampler2D albedoMap;
    sampler2D normalMap;
    sampler2D roughnessMetallicMap;
    sampler2D aoMap;
}; 

struct Light 
{
    vec3 Position;
    vec3 Color;
};

// lights
const int MAX_LIGHTS = 5;

uniform Material material;
uniform Light lights[MAX_LIGHTS]; // Lighting



uniform samplerCube irradianceMap;
uniform samplerCube prefilterMap;
uniform sampler2D brdfLUT;

const float PI = 3.14159265359;

vec3 getNormalFromMap()
{
    vec3 tangentNormal = texture(material.normalMap, TexCoords).xyz * 2.0 - 1.0;

    vec3 Q1  = dFdx(WorldPos);
    vec3 Q2  = dFdy(WorldPos);
    vec2 st1 = dFdx(TexCoords);
    vec2 st2 = dFdy(TexCoords);

    vec3 N   = normalize(Normal);
    vec3 T  = normalize(Q1*st2.t - Q2*st1.t);
    vec3 B  = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
}


vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}  

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}   

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a      = roughness*roughness; //lighting looks more correct squaring the roughness in both the geometry and normal distribution function.
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return num / denom;
}

float GeometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0; //lighting looks more correct squaring the roughness in both the geometry and normal distribution function.

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return num / denom;
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2  = GeometrySchlickGGX(NdotV, roughness);
    float ggx1  = GeometrySchlickGGX(NdotL, roughness);
	
    return ggx1 * ggx2;
}



void main()
{

    //albedo textures that come from artists are generally authored in sRGB space,
    //which is why we first convert them to linear space before using albedo in our lighting calculations.
    //Based on the system artists use to generate ambient occlusion maps you may also have to convert these from sRGB to linear space as well. 
    //Metallic and roughness maps are almost always authored in linear space.
    vec3 albedo     = pow(texture(material.albedoMap, TexCoords).rgb, vec3(2.2));
    vec3 normal     = getNormalFromMap();
    float roughness = texture(material.roughnessMetallicMap, TexCoords).g;
    float metallic  = texture(material.roughnessMetallicMap, TexCoords).b;
    float ao        = texture(material.aoMap, TexCoords).r;
    
    vec3 N = getNormalFromMap();
    //vec3 V = normalize(vec3(1,1,1) - WorldPos);
    vec3 V = normalize(camPos - WorldPos);
    vec3 R = reflect(-V, N); 

    // calculate the ratio between specular and diffuse reflection
    vec3 F0 = vec3(0.04); //assumption that most dielectric surfaces look correct with constant 0.04
    F0      = mix(F0, albedo, metallic);

    vec3 Lo = vec3(0.0);
    
    //solving the integral for each light for the render equation
    for(int i = 0; i < MAX_LIGHTS; ++i) 
    {
        //calculated in linear space
        vec3 L = normalize(lights[i].Position - WorldPos);
        vec3 H = normalize(V + L);
  
        float distance    = length(lights[i].Position - WorldPos);
        float attenuation = 1.0 / (distance * distance);
        vec3 radiance     = lights[i].Color * attenuation; 


        float NDF = DistributionGGX(N, H, roughness);       
        float G   = GeometrySmith(N, V, L, roughness);       
        vec3 F  = fresnelSchlick(max(dot(H, V), 0.0), F0);

        //Cook-Torrance BRDF
        vec3 numerator    = NDF * G * F;
        float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0)  + 0.0001; //+0.0001 to prevent divide by 0
        vec3 specular     = numerator / denominator; 
        
        //calculate each light's contribution to the reflectance equation
        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        // ratio of refraction  
        kD *= 1.0 - metallic;
        
        // calculate each light's outgoing reflectance value
        float NdotL = max(dot(N, L), 0.0);        
        Lo += (kD * albedo / PI + specular) * radiance * NdotL;
        //Lo += vec3(1.0) / distance;

    }
    vec3 F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);

    vec3 kS = F;
    vec3 kD = 1.0 - kS;
    kD *= 1.0 - metallic;	  
    vec3 irradiance = texture(irradianceMap, N).rgb;
    vec3 diffuse      = irradiance * albedo;
    
     // sample both the pre-filter map and the BRDF lut and combine them together as per the Split-Sum approximation to get the IBL specular part.
    const float MAX_REFLECTION_LOD = 4.0;
    vec3 prefilteredColor = textureLod(prefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb;    
    vec2 brdf  = texture(brdfLUT, vec2(max(dot(N, V), 0.0), roughness)).rg; //so bdrf was originally broken, when it was broken, the image was very shinier, this actually looked good on some materials, so making this somewhat adjustable might be recommended, for lets say the balloon
    //brdf = vec2(1,1); //shiny mode 
    vec3 specular = prefilteredColor * (F * brdf.x + brdf.y);

    
    vec3 ambient = (kD * diffuse + specular) * ao;
    //vec3 ambient = vec3(0.03)* albedo * ao ;

    vec3 color   = ambient + Lo;  

    //color *= globalColor.rgb;
    //color *= globalIntensity;

    //linear colour space, therefore need to gamma correct at the end 
    //tonemap to high dynamic range to ensure gamma correction is correct - using Reinhard
    //color = color / (color + vec3(1.0));

    
    //filmic tonemapping
    //vec3 x = max(vec3(0.0), color - 0.004);
    //color = (x * (6.2 * x + 0.5)) / (x * (6.2 * x + 1.7) + 0.06);

    // ACES Tonemapping
    color = color * (color + 0.0245786) - 0.000090537;
    color = color / (color + 1.03626e-2);
    
    // Gamma Correction
    color = pow(color, vec3(1.0/2.2)); 

    FragColor = vec4(color, 1.0);


    //FragColor = vec4(vec3(metallic), 1.0f);
    //FragColor = vec4(vec3(roughness), 1.0f);
    //FragColor = vec4(albedo, 1.0f);
    //FragColor = vec4(normal, 1.0f);
}

