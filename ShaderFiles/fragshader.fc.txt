#version 330 core

layout (location = 0) out vec4 FragColor;
layout (location = 1) out vec4 BrightColor;


struct Material 
{
    sampler2D texture_diffuse1;
    sampler2D texture_specular1;
	sampler2D texture_normal;
    float shininess;
}; 

struct DirLight
{
	vec3 direction;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

struct PointLight 
{    
    vec3 position;
    
    float constant;
    float linear;
    float quadratic;  

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  

struct SpotLight
{
	vec3 position;
	vec3 direction;

	float cutOff;
	float outerCutOff;

	float constant;
    float linear;
    float quadratic;

	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

#define NR_POINT_LIGHTS 4  
uniform PointLight pointLights[NR_POINT_LIGHTS];

uniform SpotLight spotLight;
uniform DirLight dirLight;
uniform Material material;

uniform vec3 lightPos; //for shadows as direction light does not have a light pos
uniform sampler2D shadowMap;
uniform sampler2D diffuseTexture;	

//uniform sampler2D texture_diffuse1;
//uniform sampler2D texture_specular1;

in vec2 TexCoords;
in vec3 Normal;
in vec3 FragPos;

in vec3 TangentLightPos;
in vec3 TangentViewPos;
in vec3 TangentFragPos;
//in vec4 FragPosLightSpace;


in mat3 TBN;

//out vec4 FragColor;


//Forward declarations
vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir);
float ShadowCalculation(vec4 fragPosLightSpace);

void main()
{
	// properties
    //vec3 norm = normalize(Normal);
	//vec3 viewDir = normalize(viewPos - FragPos);
	vec3 viewDir = normalize(TangentViewPos - TangentFragPos);
	// obtain normal from normal map in range [0,1]
	vec3 norm = texture(material.texture_normal, TexCoords).rgb;
	// transform normal vector to range [-1,1]
	norm = normalize(norm * 2.0 - 1.0);  // this normal is in tangent space
	
	
	
    // phase 1: Directional lighting
    vec3 result = CalcDirLight(dirLight, norm, viewDir);
	
	//vec3 result;
	// phase 2: Point lights
    for(int i = 0; i < NR_POINT_LIGHTS; i++)
        result += CalcPointLight(pointLights[i], norm, TangentFragPos, viewDir);    
    
	//Currently broke... something to do with intensity messing it up
	// phase 3: Spot light
    result += CalcSpotLight(spotLight, norm, TangentFragPos, viewDir);    
    //REMEMBER TO CHANGFE IT BACK TO += AND REMOVE THE VEC3
	//float shadow = ShadowCalculation(FragPosLightSpace);  
   

    FragColor = vec4(result, 1.0);
    
    
    //vec3 visualizedNormal = norm * 0.5 + 0.5; // Transform from [-1,1] to [0,1] range
    //FragColor = vec4(visualizedNormal, 1.0);
    
		float brightness = dot(FragColor.rgb, vec3(0.2126, 0.7152, 0.0722));
    if(brightness > 1)
        BrightColor = vec4(FragColor.rgb, 1.0);
    else
        BrightColor = vec4(0.0, 0.0, 0.0, 1.0);
}

vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
	vec3 lightDir = normalize(-light.direction);
	//lightDir *= TBN; 
	//viewDir *= TBN;
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);

    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

    // combine results
    vec3 ambient  = light.ambient;// * vec3(texture(material.texture_diffuse1, TexCoords));
    vec3 diffuse  = light.diffuse  * diff;// * vec3(texture(material.texture_diffuse1, TexCoords));
    vec3 specular = light.specular * spec;// * vec3(texture(material.texture_specular1, TexCoords));
	
	//float shadow = ShadowCalculation(FragPosLightSpace);  
    
	return ((ambient + diffuse + specular) * vec3(texture(material.texture_diffuse1, TexCoords)));
}

vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	//light.position *= TBN;
    vec3 lightDir = normalize((light.position) - (fragPos));
	lightDir *= TBN;
	//viewDir *= TBN;
	//fragPos *= TBN;

    // diffuse shading
    float diff = max(dot(lightDir, normal), 0.0); //nothing should act up, but befoer it was normal, lightDir
    // specular shading
    //vec3 reflectDir = reflect(-lightDir, normal);
    //float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	//COOL BROKEN TIP to revert to normal, multiple normal by Normal, then in vertex shader change Normal in N formula to aNormal - opposite works but breaks stuff, looks kinda cool tho
	vec3 halfwayDir = normalize(lightDir + viewDir); 
	float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
    // attenuation
    
	float distance = length(fragPos - light.position);
	float attenuation = 1.0 / (distance * distance);

	//			  // attenuation
    //float distance    = length(light.position - fragPos);
    //float attenuation = 1.0 / (light.constant + light.linear * distance + 
  	//light.quadratic * (distance * distance));  
    // combine results
    vec3 ambient  = light.ambient  * vec3(texture(material.texture_diffuse1, TexCoords));
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(material.texture_diffuse1, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, TexCoords));
	//FOR COOL EFFECT, CHANGE THE *= TO +=
    ambient  *= attenuation;
    diffuse  *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
} 

// calculates the color when using a spot light.
vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    //lightDir *= TBN;
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);

    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

    // Attenuation
    float distance = length(light.position - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

    // Spotlight intensity
    float theta = dot(lightDir, normalize(-light.direction));
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

    // Combine results
    vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse1, TexCoords));
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.texture_diffuse1, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, TexCoords));

    ambient *= attenuation * intensity;
    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;

    return (ambient + diffuse + specular);
}

float ShadowCalculation(vec4 fragPosLightSpace)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    // calculate bias (based on depth map resolution and slope)
    vec3 normal = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);
    // check whether current frag pos is in shadow
    // float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    // PCF
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    
    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if(projCoords.z > 1.0)
        shadow = 0.0;
        
    return shadow;
}

//vec3 lightDir = normalize(light.position - fragPos);
//// diffuse shading
//float diff = max(dot(normal, lightDir), 0.0);
//// specular shading
//vec3 reflectDir = reflect(-lightDir, normal);
//float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
//// attenuation
//float distance = length(light.position - fragPos);
//float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));
//// spotlight intensity
//float theta = dot(lightDir, normalize(-light.direction)); 
//float epsilon = light.cutOff - light.outerCutOff;
//float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
//// combine results
//vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse1, TexCoords));
//vec3 diffuse = light.diffuse * diff * vec3(texture(material.texture_diffuse1, TexCoords));
//vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, TexCoords));
//ambient *= attenuation * intensity;
//diffuse *= attenuation * intensity;
//specular *= attenuation * intensity;

/*

vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
	//light.position *= TBN;
    vec3 lightDir = normalize((light.position) - (fragPos));
	lightDir *= TBN;
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    //vec3 reflectDir = reflect(-lightDir, normal);
    //float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
	
	vec3 halfwayDir = normalize(lightDir + viewDir); 
	float spec = pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
    // attenuation
    float distance = length((light.position) - fragPos);
    float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));    
    // spotlight intensity
    float theta = dot(lightDir, normalize(-light.direction)); 
    float epsilon = light.cutOff - light.outerCutOff;
    float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);
    // combine results
    vec3 ambient = light.ambient * vec3(texture(material.texture_diffuse1, TexCoords));	
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.texture_diffuse1, TexCoords));
    vec3 specular = light.specular * spec * vec3(texture(material.texture_specular1, TexCoords));
    ambient *= attenuation * intensity;
    diffuse *= attenuation * intensity;
    specular *= attenuation * intensity;
	
    return (ambient + diffuse + specular);
}

*/